[{"title":"Python核心编程学习笔记","date":"2017-07-12T14:08:46.000Z","path":"2017/07/12/Python核心编程学习笔记/","text":"正则表达式常见正则表达式符号和字符 表示法 描述 示例 literal 匹配字符串字面值 re.match(‘foo’, ‘food’) re1丨re2 匹配正则表达式re1或者re2 re.match(‘ab\\丨cd’, ‘abd’) . 匹配任何字符（除了\\n之外） re.match(‘.e’, ‘de’) ^ 匹配字符串起始部分 re.match(‘^Dear’, ‘Dear my baby’) $ 匹配字符串的终止部分 re.search(‘baby$’, ‘Dear my baby’) * 匹配0次或多次前面出现的正则表达式 re.search(‘ba*b’, ‘Dear my baby’) + 匹配1次或多次前面出现的正则表达式 re.search(‘\\w+.com’, ‘http://ww.baidu.com‘) ? 匹配0次或1次前面出现的正则表达式 re.search(r’b\\w?.com’, ‘http://ww.ba.com‘) {n} 匹配n次前面出现的正则表达式 re.search(r’[0-9]{3}’, ‘87a45b775c’) {m, n} 匹配m到n次前面出现的正则表达式 re.search(r’[0-9]{2,3}’, ‘87a45b775c’)","tags":[]},{"title":"日常记录备忘","date":"2017-07-01T07:38:26.000Z","path":"2017/07/01/日常记录备忘/","text":"系统同时配置了py2和py3环境，运行rf脚本无反应因为ride不支持py3，只能使用py2需要将Python27\\Scripts\\pybot.bat中[python]替换为[python2] 使用uiautomatorviewer.bat时提示unable connect to adb修改前： -Dcom.android.uiautomator.bindir=%prog_dir% 修改后： -Dcom.android.uiautomator.bindir=%ANDROID_HOME%\\tools android相关命令获取已安装的应用的包名adb shell pm list packages 获取包名对应的路径adb shell pm path com.huawei.ca 其中com.huawei.ca为相应的包名 查看已安装应用的Activity先打开应用，再输入以下命令 adb shell dumpsys window w |findstr \\/ | findstr name= 或者： adb shell dumpsys window windows | findstr mFocusedApp","tags":[]},{"title":"Python爬虫学习笔记","date":"2017-06-28T12:05:49.000Z","path":"2017/06/28/Python爬虫学习笔记/","text":"Requests库的使用安装pip3 install requests 使用获取百度首页的内容1234import requestsr = requests.get(\"http://www.baidu.com\")r.encoding = \"utf-8\"print(r.text) 主要API request “集大成者”，可构造以下的各个请求。 get 获取页面内容的接口，对应于HTTP的GET 函数完整定义如下： 123456789101112def get(url, params=None, **kwargs): r\"\"\"Sends a GET request. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`. :param \\*\\*kwargs: Optional arguments that ``request`` takes. :return: :class:`Response &lt;Response&gt;` object :rtype: requests.Response \"\"\" kwargs.setdefault('allow_redirects', True) return request('get', url, params=params, **kwargs) 注释部分已将各个参数及返回值含义解释清楚。 get函数返回的Response对象包含了爬虫返回的全部内容。主要包括 属性 说明 status_code 请求的状态码，200表示连接成功，404表示连接失败 text 响应内容的字符串形式 encoding 从header中取得的内容编码方式 apparent_encoding 从内容中分析出的响应内容的编码方式 content 响应内容的二进制形式 爬取网页的一般框架 1234567891011121314import requestsdef getHTMLText(url): try: r = requests.get(url) r.raise_for_status() #非正常状态，如404时，会产生异常 r.encoding = r.apparent_encoding return r.text except: return \"产生异常\"if __name__ == \"__main__\": url = \"http://www.baidu.com\" print(getHTMLText(url)) head 获取页面头信息的接口，对应于HTTP的HEAD 优势：网络流量小 123import requestsr = requests.head(\"http://www.baidu.com\")print(r.headers) post 向网页提交POST请求的接口，对应于HTTP的POST 1234import requestspayload = &#123;\"key1\" : \"value1\", \"key2\" : \"value2\"&#125;r = requests.post(\"http://httpbin.org/post\", data=payload)print(r.text) put 向网页提交PUT请求的接口，对应于HTTP的PUT 与post类似，会将原有的数据覆盖 1234import requestspayload = &#123;\"key1\" : \"value1\", \"key2\" : \"value2\"&#125;r = requests.put(\"http://httpbin.org/put\", data=payload)print(r.text) patch 向网页提交局部修改请求的接口，对应于HTTP的PATCH delete 向网页提交删除请求的接口，对应于HTTP的DELETE","tags":[]},{"title":"Win10下py2和py3共存","date":"2017-06-28T11:40:53.000Z","path":"2017/06/28/Win10下py2和py3共存/","text":"安装Python2和Python3从官网分别下载Python2.x和Python3.x版本的程序进行安装。安装方法略。 并将分别将Python加入到环境变量中。安装正确的话，环境变量中应当存在以下值。 path\\to\\Python27 path\\to\\Python27\\Scripts path\\to\\Python36 path\\to\\Python36\\Scripts 将Python27根目录下的python.exe,pythonw.exe分别重命名为python2.exe,python2w.exe 将Python36根目录下的python.exe,pythonw.exe分别重命名为python3.exe,python3w.exe cmd执行命令python2和python3查看是否成功 pip2和pip3设置cmd分别执行以下命令： python3 -m pip install –upgrade pip –force-reinstall python2 -m pip install –upgrade pip –force-reinstall 安装成功之后，可通过[pip2 install xxx]和[pip3 install xxx]来安装各自的包啦！","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"vi常用命令","date":"2017-06-27T13:43:16.000Z","path":"2017/06/27/vi常用命令/","text":"三种模式vi总共有三种模式，命名方法不一，暂且命名为 默认模式 命令模式 编辑模式 三种模式之间的切换及主要功能如下图所示： *使用vi命令时，最初始进入的即为默认模式 常用命令默认模式翻页[Ctrl+u] 向前翻半屏 [Ctrl+d] 向后翻半屏 [Ctrl+f] 向前翻一屏 [Ctrl+b] 向后翻一屏 移动光标[h] 向左移动光标（类似于左键） [j] 向下移动光标（类似于下键） [k] 向上移动光标（类似于上键） [l] 向右移动光标（类似于右键） [0] 移动光标到行首（类似于Home键） [$] 移动光标到行首（类似于End键） [G] 移动光标到末行行首 [nG] 移动光标到第n行行首，n为1,2,3… [gg] 移动光标到首行行首,类似于[1G] [1+Enter] 光标向下移动n行至行首 删除文本[x] 删除光标后的一个字符（X为向前删除一个字符） [dd] 删除光标在的一整行 [ndd] 删除光标所在行在内向后的n行。n为1,2,3… 复制粘贴[yy] 复制光标所在行 [nyy] 复制光标所在行在内向后的n行。n为1,2,3… [p] 粘贴复制的内容到所在行的下一行（P为粘贴到上一行） 撤销重复[u] 撤销上次操作（类似普通编辑器常用的Ctrl+z） [.] 重复上次的操作（不论上一次是什么操作） 命令模式查找[/word] 向下查找字符串 [?word] 向上查找字符串 [n] 查找下一个，若查找命令[/]则为向下查找，若为[?]则为向上查找（N正好相反） 行号[:set number] 左侧显示行号 [:set nonumber] 左侧不显示行号 保存退出[:w] 保存文件 [:w!] 若文件为只读，强制保存文件 [:q] 离开vi，若有修改未保存，会有警告 [:q!] 强制退出vi [:wq] 保存后退出vi [:wq!] 强制保存后退出vi [:w newfilename] 另存为 编辑模式[i] 从当前光标所在处插入[a] 从当前光标的下一个字符处插入[o] 从当前光标的下一行插入","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"vi","slug":"vi","permalink":"http://yoursite.com/tags/vi/"}]},{"title":"Hello World","date":"2017-06-24T13:45:47.239Z","path":"2017/06/24/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]