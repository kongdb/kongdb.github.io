[{"title":"深入浅出MySQL","date":"2017-08-15T13:17:50.000Z","path":"2017/08/15/深入浅出MySQL/","text":"常用命令可以通过[？CONTENTS]命令查询所有命令 DDL数据定义语言 命令作用 命令格式 创建数据库 CREATE DATABASE newdb; 显示数据库 SHOW DATABASES; 选择数据库 USE newdb; 显示表 SHOW TABLES; 删除数据库 DROP DATABASE newdb; 创建表 CREATE TABLE emp(ename VARCHAR(20), hiredata DATE, deptno INT(2)); 查看表信息 DESC emp; 查看更全面的表定义信息 SHOW CREATE TABLE emp\\G; 删除表 DROP TABLE emp; 修改表字段类型 ALTER TABLE emp MODIFY ename VARCHAR(30); 增加表字段 ALTER TABLE emp ADD age INT(5) [AFTER ename]; 删除表字段 ALTER TABLE emp DROP COLUMN age; 修改字段名字 ALTER TABLE emp CHANGE age newage INT(10); 修改字段排列顺序(ADD/CHANGE/MODIFY ) ALTER TABLE emp MODIFY newage INT(2) AFTER ename; 修改表名 ALTER TABLE emp RENAME emp2; DML数据库操作语言 命令作用 命令格式 插入记录 INSERT INTO emp (ename, hiredate, deptno) VALUES(‘kongdb’, ‘1991-05-16’, 1),(‘sss’, ‘1992-01-01’, 2); 更新记录 UPDATE emp SET ename=’new’ WHERE deptno=2; 更新多表 UPDATE emp a, dept b SET a.sal=a.sal*b.deptno WHERE a.deptno=b.deptno; 删除记录 DELETE FROM emp WHERE ename=’new’; 删除多表 DELETE a, b FROM emp a, dept b WHERE a.deptno=b.deptno AND a.deptno=1; 查询记录 SELECT * FROM emp; 查询不重复的记录 SELECT DISTINCT deptno FROM emp; 条件查询(=,&lt;,&gt;,&lt;=,&gt;=,!=,AND,OR) SELECT * FROM emp WHERE sal&gt;4000 AND deptno=4; 查询排序 SELECT * FROM emp ORDER BY sal [DESC]; 查询限制 SELECT * FROM emp LIMIT 1; 聚合操作(COUNT,SUM,MAX,MIN) SELECT [field1,field2,……fieldn] fun_nameFROM tablename[WHERE where_contition][GROUP BY field1,field2,……fieldn[WITH ROLLUP]][HAVING where_contition] 统计某个值出现次数 SELECT deptno, COUNT(1) FROM emp GROUP BY deptno; 对聚合结果再进行汇总WITH ROLLUP SELECT deptno, COUNT(1) FROM emp GROUP BY deptno WITH ROLLUP; 对统计结果再进行过滤HAVING SELECT deptno, COUNT(1) FROM emp GROUP BY deptno HAVING COUNT(1)&gt;1; 求和、最大值、最小值 SELECT SUM(sal), MAX(sal), MIN(sal) FROM emp; 内连接 SELECT ename, deptname FROM emp, dept WHERE emp.deptno=dept.deptno; 外连接（左连接）包含左边所有记录，即使右边没有 SELECT ename, deptname FROM emp LEFT JOIN dept ON emp.deptno=dept.deptno; 外连接（右连接）包含右边所有记录，即使左边没有 SELECT ename, deptname FROM emp RIGHT JOIN dept ON emp.deptno=dept.deptno; 子查询（查询所用到的条件是另一个select语句的结果）IN,NOT IN,=,!=,EXISTS,NOT EXISTS SELECT * FROM emp WHERE deptno IN (SELECT deptno FROM dept); 记录联合（UNION ALL） SELECT deptno FROM empUNION ALLSELECT deptno FROM dept; 记录联合（UNION）为[UNION ALL]再DISTINCT后的结果 SELECT deptno FROM empUNIONSELECT deptno FROM dept; DCL数据库管理语言 命令作用 命令格式 创建用户 CREATE USER ‘usr1’@’localhost’; 增加权限（GRANT） GRANT SELECT, INSERT ON newdb.* TO ‘usr1’@’localhost’; 解除权限（REVOKE） REVOKE INSERT ON newdb.* FROM ‘usr1’@’localhost’; MySQL支持的数据类型数值类型 整数类型 字节 最小值 最大值 TINYINT 1 有符号-128无符号 0 有符号 127无符号 255 SMALLINT 2 有符号-32768无符号 0 有符号 32767无符号 65535 MEDIUMINT 3 有符号-8388608无符号 0 有符号 8388607无符号 1677215 INT、INTEGER 4 有符号-2147483648无符号 0 有符号 2147483647无符号 4294967295 BIGINT 8 有符号-9223372036854775808无符号 0 有符号 9223372036854775807无符号 18446744073709551615 浮点数类型 字节 最小值 最大值 FLOAT 4 ±1.175494351E-38 ±3.402823466E+38 DOUBLE 8 ±2.2250738585072014E-308 ±1.7976931348623157E+308 定点数类型 字节 描述 DEC(M,D)，DECIMAL(M,D) M+2 最大取值范围与DOUBLE 相同，给定DECIMAL 的有效取值范围由M 和D决定 浮点数类型 字节 最小值 最大值 BIT(M) 1～8 BIT(1) BIT(64) 整数类型指定显示宽度1CREATE TABLE t1(id INT(5)); 则id的宽度指定为5（不指定时默认为INT(11)） 1ALTER TABLE t1 MODIFY id INT(5) ZEROFILL; 设置ZEROFILL则宽度不足时自动补0，指定ZEROFILL时会为该列自动添加UNSIGNED属性 AUTO_INCREMENT属性可利用此属性设置某列为自增 设置方法 123CREATE TABLE t2(id INT AUTO_INCREMENT NOT NULL PRIMARY KEY);CREATE TABLE t2(id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id));CREATE TABLE t2(id INT AUTO_INCREMENT NOT NULL, UNIQUE(id)); 定点数（M,D）M表示所有数字位数（整数+小数），D表示小数位数字 DECIMAL不指定精度时，默认为(10,0) BIT(M)类型M为1到64，不写则默认为1 SELECT结果默认看不到BIT类型，可用BIN(二进制格式)，HEX(16进制格式)进行读取 1SELECT BIN(id), HEX(id) FROM t2;","tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}]},{"title":"IRR与XIRR","date":"2017-08-13T12:43:51.000Z","path":"2017/08/13/IRR与XIRR/","text":"IRR函数说明一系列现金流的内部收益率，现金流数额不必相等，但是必须是定期出现的（如每周或每月） 语法IRR(values, [guess]) 参数说明如下 Values 必需。 数组或单元格的引用，这些单元格包含用来计算内部收益率的数字。 Values 必须包含至少一个正值和一个负值，以计算返回的内部收益率。 IRR 使用值的顺序来说明现金流的顺序。 一定要按您需要的顺序输入支出值和收益值。 如果数组或引用包含文本、逻辑值或空白单元格，这些数值将被忽略。 Guess 可选。 对函数 IRR 计算结果的估计值。 Microsoft Excel 使用迭代法计算函数 IRR。 从 guess 开始，IRR 不断修正计算结果，直至其精度小于 0.00001%。 如果 IRR 运算 20 次，仍未找到结果，则返回 错误值 #NUM!。 多数情况下，不必为 IRR 计算提供 guess 值。 如果省略 guess，则假定它为 0.1 (10%)。 如果 IRR 返回 错误值 #NUM!，或结果不接近您预期的值，可用另一个 guess 值重试。 示例1、一开始投入一笔资金，每年取得一定收入，计算收益率 数据 说明 -70000 成本费用 12000 第一年净收入 15000 第二年净收入 18000 第三年净收入 21000 第四年净收入 26000 第五年净收入 8.66% 五年后的内部收益率( =IRR(A2:A7) ) 2、一开始借了一笔钱，每月还一部分，计算借款实际利率 比如和银行借了30000元，每月还5100，分6个月还 时间 现金流 - 30000 第一个月 -5100 第二个月 -5100 第三个月 -5100 第四个月 -5100 第五个月 -5100 第六个月 -5100 每月利率（=IRR(B2:B8)） 0.57% 年化利率 （=(1+IRR(B2:B8))^12-1） 7.04% 3、每月定投一笔钱，一段时间后计算平均收益 时间 定投资金 第一个月初 -10000 第二个月初 -10000 第三个月初 -10000 第四个月初 -10000 第五个月初 -10000 第六个月初 -10000 第六个月末余额 63000 每月利率（=IRR(B2:B8)） 1.4% 年化利率 （=(1+IRR(B2:B8))^12-1） 18.1% 哇塞，实际年化好吓人 XIRR函数说明用于计算不一定定期发生的现金流的内部收益率 语法XIRR(values, dates, [guess]) 参数说明如下 值 必需。 与 dates 中的支付时间相对应的一系列现金流。 首期支付是可选的，并与投资开始时的成本或支付有关。 如果第一个值是成本或支付，则它必须是负值。 所有后续支付都基于 365 天/年贴现。 值系列中必须至少包含一个正值和一个负值。 日期 必需。 与现金流支付相对应的支付日期表。 日期可按任何顺序排列。 应使用 DATE 函数输入日期，或者将日期作为其他公式或函数的结果输入。 例如，使用函数 DATE(2008,5,23) 输入 2008 年 5 月 23 日。 如果日期以文本形式输入，则会出现问题 。 Guess 可选。 对函数 XIRR 计算结果的估计值。 示例1、一开始投入一笔钱，不定期获得收益 现金流 日期 -10000 2008-1-1 2750 2008-3-1 4250 2008-10-30 3250 2009-2-15 2750 2009-4-1 年化收益率(=XIRR(A2:A6, B2:B6)) 37.34% 2、每月不定期定投 现金流 日期 -3000 2016-1-14 -3000 2016-1-10 -5000 2016-3-6 -10000 2016-8-10 -10000 2016-10-10 32850 2016-10-30 年化收益率(=XIRR(A2:A2, B2:B7)) 17.51% 参考链接微信公众号：越女事务所 IRR 官方说明： https://support.office.com/zh-CN/article/IRR-%E5%87%BD%E6%95%B0-64925EAA-9988-495B-B290-3AD0C163C1BC XIRR官方说明： https://support.office.com/zh-CN/article/XIRR-%E5%87%BD%E6%95%B0-DE1242EC-6477-445B-B11B-A303AD9ADC9D","tags":[{"name":"金融","slug":"金融","permalink":"http://yoursite.com/tags/金融/"},{"name":"理财","slug":"理财","permalink":"http://yoursite.com/tags/理财/"}]},{"title":"试题解答","date":"2017-08-09T12:10:02.000Z","path":"2017/08/09/试题解答/","text":"题目11234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#-*- coding: utf-8 -*-import pandas as pdimport numpy as npimport os#逐块读取，每块的sizeCHUNK_SIZE = 1000#空年龄的keyNULL_KEY = -1def readDataFromFile(fName): if not os.path.exists(fName): print(\"请确认文件是否存在, 路径：%s\" % fName) return #逐块的迭代器，header=0表示忽略第一行的表头 chunker = pd.read_table(fName, sep='\\s+', header=0, chunksize=CHUNK_SIZE) #结果的列表 result = &#123;&#125; #行号 line = 0 for piece in chunker: #年龄的列表 ages = piece.age.values #年龄是否为空的列表，空则为False isEmptyAge = piece.age.isnull().values for i in range(len(ages)): line = line + 1 if isEmptyAge[i]: result[NULL_KEY] = (result[NULL_KEY] + 1 if NULL_KEY in result else 1) else: try: key = int(ages[i]) result[key] = (result[key] + 1 if key in result else 1) except: print('***错误！数据的第%d行，年龄不是整数数字***' % line) return resultdef saveResultToFile(fName, result): with open(fName, 'w') as f: f.write('年龄 人数\\n') #给年龄排个序 ages = list(result.keys()) ages.sort() for age in ages: if age == NULL_KEY: f.write('未知 %d\\n' % result[age]) else: f.write('%d %d\\n' % (age, result[age]))if __name__ == '__main__': inFile = 'E:/info.txt' outFile = 'E:/result.txt' result = readDataFromFile(inFile) if not result is None: saveResultToFile(outFile, result) 题目212345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# -*- coding: utf-8 -*-import unittestdef checkListFormat(lData): if not isinstance(lData, list) or len(lData) != 2: print('数据格式错误') return False for i in lData: if not isinstance(i, int): print('数据格式错误') return False if not lData[0] &lt; lData[1]: print('数据格式错误') return False return Truedef insertList(before, inData): if not checkListFormat(inData): return if not isinstance(before, list): return for i in before: if not checkListFormat(i): return n = len(before) startIndex = n endIndex = n for i in range(n): if inData[0] &gt; before[i][1]: continue startIndex = i break for i in range(n): if inData[1] &gt; before[i][0]: continue endIndex = i - 1 break #startIndex为n说明待插入值的最小值都比原列表发最后一个值大 newBegin = (inData[0] if startIndex == n else min(inData[0], before[startIndex][0])) newEnd = 0 if endIndex == -1: #待插入值的最大值都比原列表第一个值大 newEnd = inData[1] elif endIndex == n: #需要比较两个列表最后一个值 newEnd = max(inData[1], before[n-1][1]) else: newEnd = max(inData[1], before[endIndex][1]) for i in range(startIndex, min(endIndex+1, n)): before.pop(startIndex) before.insert(startIndex, [newBegin, newEnd]) return beforeclass TestInsert(unittest.TestCase): def test_insertList(self): self.assertEqual(insertList([[1, 3], [6, 9]], [2, 5]), [[1, 5], [6, 9]]) self.assertEqual(insertList([[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]], [4, 9]), [[1, 2], [3, 10], [12, 16]]) self.assertEqual(insertList([[6, 9], [10, 11]], [1, 3]), [[1, 3], [6, 9], [10, 11]]) self.assertEqual(insertList([[6, 9], [10, 11]], [19, 32]), [[6, 9], [10, 11], [19, 32]]) self.assertEqual(insertList([[6, 9], [10, 13]], [3, 8]), [[3, 9], [10, 13]]) self.assertEqual(insertList([[6, 9], [10, 13]], [12, 17]), [[6, 9], [10, 17]]) self.assertEqual(insertList([[6, 9], [10, 13]], [11, 12]), [[6, 9], [10, 13]])if __name__ == '__main__': unittest.main()","tags":[]},{"title":"Python金融大数据分析学习笔记","date":"2017-07-26T13:49:28.000Z","path":"2017/07/26/Python金融大数据分析学习笔记/","text":"Python常用工具IPython Notebook说明: 本地Web短编写调试Python代码 安装方法: pip install juputer 运行: jupyter notebook Python quant-platform说明: Web浏览器的金融分析和协作平台，环境已经配置好 地址: http://analytics.quant-platform.com Anaconda说明: 拥有科学计算的Python发行版，提供了包管理和环境管理功能，可以方便地解决多版本Python共存的问题 数据类型和结构基本数据类型浮点数精确地存储12c = 0.5c.as_integer_ratio() decimal 模块1234567import decimalfrom decimal import Decimald = Decimal(1) / Decimal(11) #28位decimal.getcontext().prec = 50d = Decimal(1) / Decimal(11) #50位 函数式编程filter,map,reduce12345def even(x): return x % 2 == 0a = map(even, range(10)) #迭代器[x for x in a] #[True, False, True, False, True, False, True, False, True, False] 使用lamda函数 1map(lamda x: x ** 2, ) filter:筛选匹配函数布尔值的元素 12a = filter(even, range(10))[x for x in a] #[0, 2, 4, 6, 8] reduce:归纳列表 求列表和的例子12from functools import reducereduce(lambda x, y: x+ y, range(15)) Python 字符串逆序12s = \"123你好世界def\"s[::-1] str[begin:end:step] step 默认值为1 深层拷贝deepcopy的运用1234a = [0.5, 1]b = aa[0] = 3b #[3, 1] 12345from copy import deepcopya = [0.5, 1]b = deepcopy(a)a[0] = 3b #[0.5, 1] 参考：https://iaman.actor/blog/2016/04/17/copy-in-python","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python安装MySQL-Python库","date":"2017-07-22T11:48:05.000Z","path":"2017/07/22/Python安装MySQL-Python库/","text":"Python2.7安装MySQL-Python直接执行pip命令1pip2 install MySQL-Python 报错_mysql.c(42) : fatal error C1083: Cannot open include file: ‘config-win.h’: No such file or directory 安装mysql-connector-curl: https://dev.mysql.com/downloads/connector/c/6.0.html 下载相应的版本，比如64位的windows则下载： mysql-connector-c-6.0.2-winx64.msi 默认安装即可 再次执行pip命令还是同样的错误，去mysql-connector-c的安装目录下查找，config-win.h文件确实已经有了。 奇怪，把目录设到环境变量Path中也不行。既然是编译的时候报错了，是不是驾驶INCLUDE目录就行了呢？ 设置编译INCLUDE和LIB目录cmd输入 12SET INCLUDE=C:\\Program Files\\MySQL\\MySQL Connector C 6.0.2\\includeSET LIB=C:\\Program Files\\MySQL\\MySQL Connector C 6.0.2\\lib\\opt 再次执行pip，安装成功 Python3安装MySQL-Python安装上面同样的方法之后，还是报错 mysqlclient.lib中函数undefined，暂时不知道怎么解决。","tags":[]},{"title":"Python核心编程学习笔记","date":"2017-07-12T14:08:46.000Z","path":"2017/07/12/Python核心编程学习笔记/","text":"正则表达式常见正则表达式符号和字符 表示法 描述 示例 literal 匹配字符串字面值 re.match(‘foo’, ‘food’) re1 re2 匹配正则表达式re1或者re2 re.match(‘ab\\ cd’, ‘abd’) . 匹配任何字符（除了\\n之外） re.match(‘.e’, ‘de’) ^ 匹配字符串起始部分 re.match(‘^Dear’, ‘Dear my baby’) $ 匹配字符串的终止部分 re.search(‘baby$’, ‘Dear my baby’) * 匹配0次或多次前面出现的正则表达式 re.search(‘ba*b’, ‘Dear my baby’) + 匹配1次或多次前面出现的正则表达式 re.search(‘\\w+.com’, ‘http://ww.baidu.com‘) ? 匹配0次或1次前面出现的正则表达式 re.search(r’b\\w?.com’, ‘http://ww.ba.com‘) {n} 匹配n次前面出现的正则表达式 re.search(r’[0-9]{3}’, ‘87a45b775c’) {m, n} 匹配m到n次前面出现的正则表达式 re.search(r’[0-9]{2,3}’, ‘87a45b775c’) [x-y] 匹配x~y范围内的任意”单一字符” re.search(‘[a-z]’, ‘123ACFdGH’) [^…] 不匹配此字符集中出现的任意字符 re.search(‘[^A-Z]’, ‘ASDG1KL’) (…) 匹配封闭的正则表达式，并另存为子组 re.search(‘([A-Z]{3}).([0-9]{3})’, ‘ASDG123’).group() \\d 匹配任何十进制数，同[0-9]，与\\D相反 re.search(r’\\d’, ‘ASDG123’) \\w 匹配任何字母数字下划线，同[A-Za-z0-9_]，与\\W相反 re.search(r’\\w’, ‘:”@#$a_+’) \\s 匹配任何空格字符，与[\\n\\t\\v\\f]同，与\\S相反 re.search(r’\\s’, ‘:”abc def’) \\b 匹配任何边界字符，与\\B相反 re.search(r’\\bThe\\b’, ‘:”They is not The’) \\N 匹配已保存的子组，其中N为1,2… price:\\16 \\c 匹配特殊字符 .,\\,* 网络编程TCP示例代码tcp服务器 12345678910111213141516171819202122232425262728# -*- coding: utf-8 -*-from socket import *from time import ctimeHOST = ''PORT = 21567BUFSIZE = 1024ADDR = (HOST, PORT)tcpSerSock = socket(AF_INET, SOCK_STREAM)tcpSerSock.bind(ADDR)tcpSerSock.listen(5)while True: print(\"waiting for connection...\") tcpCliSock, addr = tcpSerSock.accept() print('...connected from :', addr) while True: data = tcpCliSock.recv(BUFSIZE) if not data: break #tcpCliSock.send(bytes('hello', 'utf-8')) sendData = '[%s] %s' % (ctime(), data.decode('utf-8')) tcpCliSock.send(bytes(sendData, 'utf-8')) tcpCliSock.close()tcpSerSock.close() tcp客户端 12345678910111213141516171819202122# -*- coding: utf-8 -*-from socket import *HOST = '127.0.0.1'PORT = 21567BUFSIZE = 1024ADDR = (HOST, PORT)tcpClt = socket(AF_INET, SOCK_STREAM)tcpClt.connect(ADDR)while True: data = input('&gt; ') if not data: break tcpClt.send(bytes(data, 'utf-8')) data = tcpClt.recv(BUFSIZE) if not data: break print(data.decode('utf-8'))tcpClt.close() udp服务器 123456789101112131415161718from socket import *from time import ctimeHOST = ''PORT = 21567BUFSIZE = 1024ADDR = (HOST, PORT)udpSerSock = socket(AF_INET, SOCK_DGRAM)udpSerSock.bind(ADDR)while True: print('waiting for message ...') data, addr = udpSerSock.recvfrom(BUFSIZE) sendData = '[%s] %s' % (ctime(), data.decode('utf-8')) udpSerSock.sendto(bytes(sendData, 'utf-8'), addr) print('...received from and returned to :', addr)udpSerSock.close() udp客户端 123456789101112131415161718from socket import *HOST = '127.0.0.1'PORT = 21567BUFSIZE = 1024ADDR = (HOST, PORT)udpCltSock = socket(AF_INET, SOCK_DGRAM)while True: data = input('&gt; ') if not data: break udpCltSock.sendto(bytes(data, 'utf-8'), ADDR) data, addr = udpCltSock.recvfrom(BUFSIZE) if not data: break print(data)udpCltSock.close() Web客户端和服务器urlparse模块注：以下皆以Python3为例 urlparse 1234from urllib.parse import urlparseurlparse(\"http://www.baidu.com\")OUT: ParseResult(scheme='http', netloc='www.baidu.com', path='', params='', query='', fragment='') urlunparse 123456from urllib.parse import urlparsefrom urllib.parse import urlunparseo = urlparse(\"http://www.baidu.com\")urlunparse(o)OUT: 'http://www.baidu.com' urljoin 将两个文件结合起来，但是不包括前一个文件的末端文件名 1234from urllib.parse import urljoinurljoin(\"http://www.baidu.com/doc/faq.html\", \"test/a/1.html\")OUT: 'http://www.baidu.com/doc/test/a/1.html'","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"日常记录备忘","date":"2017-07-01T07:38:26.000Z","path":"2017/07/01/日常记录备忘/","text":"系统同时配置了py2和py3环境，运行rf脚本无反应因为ride不支持py3，只能使用py2需要将Python27\\Scripts\\pybot.bat中[python]替换为[python2] 使用uiautomatorviewer.bat时提示unable connect to adb修改前： -Dcom.android.uiautomator.bindir=%prog_dir% 修改后： -Dcom.android.uiautomator.bindir=%ANDROID_HOME%\\tools android相关命令获取已安装的应用的包名adb shell pm list packages 获取包名对应的路径adb shell pm path com.huawei.ca 其中com.huawei.ca为相应的包名 查看已安装应用的Activity先打开应用，再输入以下命令 adb shell dumpsys window w |findstr \\/ | findstr name= 或者： adb shell dumpsys window windows | findstr mFocusedApp","tags":[]},{"title":"Python爬虫学习笔记","date":"2017-06-28T12:05:49.000Z","path":"2017/06/28/Python爬虫学习笔记/","text":"Requests库的使用安装pip3 install requests 使用获取百度首页的内容1234import requestsr = requests.get(\"http://www.baidu.com\")r.encoding = \"utf-8\"print(r.text) 主要API request “集大成者”，可构造以下的各个请求。 get 获取页面内容的接口，对应于HTTP的GET 函数完整定义如下： 123456789101112def get(url, params=None, **kwargs): r\"\"\"Sends a GET request. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`. :param \\*\\*kwargs: Optional arguments that ``request`` takes. :return: :class:`Response &lt;Response&gt;` object :rtype: requests.Response \"\"\" kwargs.setdefault('allow_redirects', True) return request('get', url, params=params, **kwargs) 注释部分已将各个参数及返回值含义解释清楚。 get函数返回的Response对象包含了爬虫返回的全部内容。主要包括 属性 说明 status_code 请求的状态码，200表示连接成功，404表示连接失败 text 响应内容的字符串形式 encoding 从header中取得的内容编码方式 apparent_encoding 从内容中分析出的响应内容的编码方式 content 响应内容的二进制形式 爬取网页的一般框架 1234567891011121314import requestsdef getHTMLText(url): try: r = requests.get(url) r.raise_for_status() #非正常状态，如404时，会产生异常 r.encoding = r.apparent_encoding return r.text except: return \"产生异常\"if __name__ == \"__main__\": url = \"http://www.baidu.com\" print(getHTMLText(url)) head 获取页面头信息的接口，对应于HTTP的HEAD 优势：网络流量小 123import requestsr = requests.head(\"http://www.baidu.com\")print(r.headers) post 向网页提交POST请求的接口，对应于HTTP的POST 1234import requestspayload = &#123;\"key1\" : \"value1\", \"key2\" : \"value2\"&#125;r = requests.post(\"http://httpbin.org/post\", data=payload)print(r.text) put 向网页提交PUT请求的接口，对应于HTTP的PUT 与post类似，会将原有的数据覆盖 1234import requestspayload = &#123;\"key1\" : \"value1\", \"key2\" : \"value2\"&#125;r = requests.put(\"http://httpbin.org/put\", data=payload)print(r.text) patch 向网页提交局部修改请求的接口，对应于HTTP的PATCH delete 向网页提交删除请求的接口，对应于HTTP的DELETE","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Win10下py2和py3共存","date":"2017-06-28T11:40:53.000Z","path":"2017/06/28/Win10下py2和py3共存/","text":"安装Python2和Python3从官网分别下载Python2.x和Python3.x版本的程序进行安装。安装方法略。 并将分别将Python加入到环境变量中。安装正确的话，环境变量中应当存在以下值。 path\\to\\Python27 path\\to\\Python27\\Scripts path\\to\\Python36 path\\to\\Python36\\Scripts 将Python27根目录下的python.exe,pythonw.exe分别重命名为python2.exe,python2w.exe 将Python36根目录下的python.exe,pythonw.exe分别重命名为python3.exe,python3w.exe cmd执行命令python2和python3查看是否成功 pip2和pip3设置cmd分别执行以下命令： python3 -m pip install –upgrade pip –force-reinstall python2 -m pip install –upgrade pip –force-reinstall 安装成功之后，可通过[pip2 install xxx]和[pip3 install xxx]来安装各自的包啦！","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"vi常用命令","date":"2017-06-27T13:43:16.000Z","path":"2017/06/27/vi常用命令/","text":"三种模式vi总共有三种模式，命名方法不一，暂且命名为 默认模式 命令模式 编辑模式 三种模式之间的切换及主要功能如下图所示： *使用vi命令时，最初始进入的即为默认模式 常用命令默认模式翻页[Ctrl+u] 向前翻半屏 [Ctrl+d] 向后翻半屏 [Ctrl+f] 向前翻一屏 [Ctrl+b] 向后翻一屏 移动光标[h] 向左移动光标（类似于左键） [j] 向下移动光标（类似于下键） [k] 向上移动光标（类似于上键） [l] 向右移动光标（类似于右键） [0] 移动光标到行首（类似于Home键） [$] 移动光标到行首（类似于End键） [G] 移动光标到末行行首 [nG] 移动光标到第n行行首，n为1,2,3… [gg] 移动光标到首行行首,类似于[1G] [1+Enter] 光标向下移动n行至行首 删除文本[x] 删除光标后的一个字符（X为向前删除一个字符） [dd] 删除光标在的一整行 [ndd] 删除光标所在行在内向后的n行。n为1,2,3… 复制粘贴[yy] 复制光标所在行 [nyy] 复制光标所在行在内向后的n行。n为1,2,3… [p] 粘贴复制的内容到所在行的下一行（P为粘贴到上一行） 撤销重复[u] 撤销上次操作（类似普通编辑器常用的Ctrl+z） [.] 重复上次的操作（不论上一次是什么操作） 命令模式查找[/word] 向下查找字符串 [?word] 向上查找字符串 [n] 查找下一个，若查找命令[/]则为向下查找，若为[?]则为向上查找（N正好相反） 行号[:set number] 左侧显示行号 [:set nonumber] 左侧不显示行号 保存退出[:w] 保存文件 [:w!] 若文件为只读，强制保存文件 [:q] 离开vi，若有修改未保存，会有警告 [:q!] 强制退出vi [:wq] 保存后退出vi [:wq!] 强制保存后退出vi [:w newfilename] 另存为 编辑模式[i] 从当前光标所在处插入[a] 从当前光标的下一个字符处插入[o] 从当前光标的下一行插入","tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"vi","slug":"vi","permalink":"http://yoursite.com/tags/vi/"}]},{"title":"Hello World","date":"2017-06-24T13:45:47.239Z","path":"2017/06/24/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]